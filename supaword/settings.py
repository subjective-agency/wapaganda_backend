import os
import mimetypes

from django.contrib import staticfiles
from django.core.checks import templates
from django.core.management import templates
from pathlib import Path
from .secure_env import SERVER_DEBUG, DJANGO_KEY
from .secure_env import POSTGRES_PASSWORD, POSTGRES_ADDRESS, POSTGRES_PORT, POSTGRES_USER, POSTGRES_DB
from .log_helper import logger

__doc__ = """
Django settings for supaword project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

# Server version
VERSION = "0.9.3"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = DJANGO_KEY
DEBUG = True
ALLOWED_HOSTS = [
    "*",
    "supaword-service-production.up.railway.app",
    "*.supaword-service-production.up.railway.app",
    "*.railway.app"
]


# Application definition
INSTALLED_APPS = [
    # Django administrative interface
    'django.contrib.admin',
    'django.contrib.auth',

    # Creating and managing relationships between objects
    'django.contrib.contenttypes',
    'django.contrib.sessions',

    # Message-passing framework to store messages for the user during redirection
    'django.contrib.messages',

    # Serving static files, such as images, CSS, and JavaScript files
    'django.contrib.staticfiles',

    # Additional packages to access abstract models
    'django_extensions',

    # DRF package
    'rest_framework',

    # CORS headers
    'corsheaders',

    # Used with DRF to filter queryset
    'django_filters',

    # Core app
    'core'
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]


CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = ['POST', 'GET', 'OPTIONS']

ROOT_URLCONF = 'supaword.urls'


# noinspection PyUnresolvedReferences
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'supaword.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': POSTGRES_DB,
        'USER': POSTGRES_USER,
        'PASSWORD': POSTGRES_PASSWORD,
        'HOST': POSTGRES_ADDRESS,
        'PORT': POSTGRES_PORT
    },
    'wapamock': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db-mock.sqlite3'
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = []

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# STATIC_URL is the URL prefix that Django will use to serve static files. For example,
# if you set STATIC_URL to 'static/', and you have a file called 'app.css' in your STATIC_ROOT directory,
# then you can access that file at the URL 'http://localhost:8000/static/app.css'.
# The URL prefix can be any string you like, but it should end with a forward slash /.
STATIC_URL = 'static/'

# STATIC_ROOT is the absolute filesystem path to the directory where Django will collect
# all your static files into a single location for deployment.
# This directory will be created automatically when you run the collectstatic command.
STATIC_ROOT = os.path.join(BASE_DIR, 'static', 'build')

# Settings for projects to access DRF features
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework_json_api.parsers.JSONParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework_json_api.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer'
    ),
    'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_json_api.filters.QueryParameterValidationFilter',
        'rest_framework_json_api.filters.OrderingFilter',
        'rest_framework_json_api.django_filters.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ),
    'SEARCH_PARAM': 'filter[search]',
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework_json_api.renderers.JSONRenderer',
    ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json'
}

logger.info(f"SERVER_DEBUG: {SERVER_DEBUG}")
logger.info(f"DEBUG: {DEBUG}")
logger.info(f"POSTGRES_ADDRESS: {POSTGRES_ADDRESS}")
logger.info(f"POSTGRES_PORT: {POSTGRES_PORT}")
logger.info(f"POSTGRES_DB: {POSTGRES_DB}")
logger.info(f"POSTGRES_USER: {POSTGRES_USER}")
logger.info(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")
logger.info(f"STATIC_URL: {STATIC_URL}")
logger.info(f"CORS_ALLOW_METHODS: {CORS_ALLOW_METHODS}")
